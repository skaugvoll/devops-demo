version: "3.8"

volumes:
  elasticsearch:
  kibana:
  agent:


services:
  #### APPS
  # ----------------------------------------------
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - ./frontend:/app
  # ----------------------------------------------
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3001:3000
  #   volumes:
  #     - ./backend:/app
  # ----------------------------------------------
  #### ELK STACK
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.0.0-alpha2
    # build:
    #   context: ./elasticsearch
    #   dockerfile: Dockerfile
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data # used for storing password after creation and reuse on subsequent runs
      # - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      # - ./elasticsearch/elastic-certificates.p12:/usr/share/elasticsearch/config/elastic-certificates.p12
      # - ./elasticsearch/service_tokens:/usr/share/elasticsearch/config/service_tokens
      # - ./docker-data-volumes/esearch:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.authc.api_key.enabled=true
    # ----------------------------------------------
  kibana:
    container_name: kibana
    depends_on:
      - elasticsearch
    image: docker.elastic.co/kibana/kibana:8.0.0-alpha2
    # build:
    #   context: ./kibana
    #   dockerfile: Dockerfile
    ports:
      - 5601:5601
    volumes:
      - kibana:/usr/share/kibana/data # used for storing password after creation and reuse on subsequent runs
      #   - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    environment:
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: 'z4eJ=7EEqcQ*OHDd1J3R'
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
  # ----------------------------------------------
  agent:
    container_name: agent
    restart: always
    image: docker.elastic.co/beats/elastic-agent:8.0.0-alpha2
    # build:
    #   context: ./fleet
    #   dockerfile: Dockerfile
    ports:
      - 8220:8220
    depends_on:
      - elasticsearch
      - kibana
    environment:
      FLEET_SERVER_ENABLE: 1
      FLEET_SERVER_ELASTICSEARCH_HOST: http://elasticsearch:9200
      FLEET_SERVER_SERVICE_TOKEN: AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2NTExNDI2NDQ2NjE6Ukgxb29FcVFTQ3lnNzBRWV9wbGZkZw
    user: root
    volumes:
      - agent:/usr/share/elastic-agent
      - /var/run/docker.sock:/var/run/docker.sock:ro
  # ----------------------------------------------
  #### MONITORING STACK
  # grafana:
  #   image: grafana/grafana
  #   volumes:
  #     # - ./grafana/mounts/datasources/sample.yaml:/etc/grafana/provisioning/datasources/sample.yaml
  #     - ./grafana/mounts/datasources/prometheus_datasource.yaml/:/etc/grafana/provisioning/datasources/prometheus_datasource.yaml
  #     ##  configure dashboard providers (import dashboards)
  #     - ./grafana/mounts/dashboards/dashboard_provider.yml/:/etc/grafana/provisioning/dashboards/dashboard_provider.yml
  #     ## copy over dashboard config
  #     - ./grafana/mounts/dashboards/server/application_server.json/:/etc/grafana/provisioning/dashboards/server/application_server.json
  #   # build:
  #   #   context: ./grafana
  #   #   dockerfile: Dockerfile
  #   # volumes:
  #   ports:
  #     - 8080:3000
  # ----------------------------------------------
  # prometheus:
  #   image: prom/prometheus
  #   # build:
  #   #   context: ./prometheus
  #   #   dockerfile: Dockerfile
  #   ports:
  #       - 9090:9090
  #   volumes:
  #     - ./prometheus/prom.yml:/etc/prometheus/prometheus.yml
  # ----------------------------------------------


