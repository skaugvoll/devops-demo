version: "3.8"

volumes:
  elatest:


services:
  #### APPS
  # ----------------------------------------------
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - ./frontend:/app
  # ----------------------------------------------
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 3001:3000
    volumes:
      - ./backend:/app
  # ----------------------------------------------
  #### ELK STACK
  elasticsearch:
    build:
      context: ./elasticsearch
      dockerfile: Dockerfile
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      # - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      # - ./elasticsearch/elastic-certificates.p12:/usr/share/elasticsearch/config/elastic-certificates.p12
      # - ./elasticsearch/service_tokens:/usr/share/elasticsearch/config/service_tokens
      - elatest:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.enabled=true
      # ----------------------------------------------
  kibana:
    depends_on:
      - elasticsearch
    build:
      context: ./kibana
      dockerfile: Dockerfile
    ports:
      - 5601:5601
    # volumes:
    #   - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    environment:
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: 7antZpYsoJuTTx8GFZW2
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      xpack.security.enabled: 1
      xpack.encryptedSavedObjects.encryptionKey: "something_at_least_32_characters"
      # xpack.security.encryptionKey: "something_at_least_32_characters"
      # ----------------------------------------------
  fleet:
    restart: always
    build:
      context: ./fleet
      dockerfile: Dockerfile
    ports:
      - 8220:8220
      - 8200:8200
    depends_on:
      - elasticsearch
      - kibana
    environment:
      FLEET_SERVER_ENABLE: 1
      FLEET_SERVER_ELASTICSEARCH_HOST: http://elasticsearch:9200
      FLEET_SERVER_SERVICE_TOKEN: AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL3Rva2VuLTE2NTEyMTU0NjUwMTI6dkhfcEF2ZkJRZXFjQllSWW1wSWZ2dw
      FLEET_SERVER_INSECURE_HTTP: 1
      FLEET_SERVER_POLICY_NAME: fleet-server-policy
      FLEET_INSECURE: 1
    user: root
    volumes:
      # - agent:/usr/share/elastic-agent
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # ----------------------------------------------
      # elastic-agent:
      #   restart: unless-stopped
      #   build:
      #     context: ./fleet
      #     dockerfile: Dockerfile
      #   depends_on:
      #     - fleet
      #   environment:
      #     - "FLEET_ENROLL=1"
      #     - "FLEET_INSECURE=1"
      #     - "FLEET_URL=http://fleet:8220"
      #     - "STATE_PATH=/usr/share/elastic-agent"
      #     - "ELASTICSEARCH_USERNAME=elastic"
      #     - "ELASTICSEARCH_PASSWORD=lvx1yVEjiXGYXZyhTrEB"
      #     - "KIBANA_USERNAME=kibana_system"
      #     - "KIBANA_PASSWORD=cqpgCa2WE2q2KK1AwYQO"
      #   # volumes:
      #   #   - type: bind
      #   #     source: ../tmp/service_logs/
      #   #     target: /tmp/service_logs/

      # ----------------------------------------------
      #### MONITORING STACK
      # grafana:
      #   image: grafana/grafana
      #   volumes:
      #     # - ./grafana/mounts/datasources/sample.yaml:/etc/grafana/provisioning/datasources/sample.yaml
      #     - ./grafana/mounts/datasources/prometheus_datasource.yaml/:/etc/grafana/provisioning/datasources/prometheus_datasource.yaml
      #     ##  configure dashboard providers (import dashboards)
      #     - ./grafana/mounts/dashboards/dashboard_provider.yml/:/etc/grafana/provisioning/dashboards/dashboard_provider.yml
      #     ## copy over dashboard config
      #     - ./grafana/mounts/dashboards/server/application_server.json/:/etc/grafana/provisioning/dashboards/server/application_server.json
      #   # build:
      #   #   context: ./grafana
      #   #   dockerfile: Dockerfile
      #   # volumes:
      #   ports:
      #     - 8080:3000
      # ----------------------------------------------
      # prometheus:
      #   image: prom/prometheus
      #   # build:
      #   #   context: ./prometheus
      #   #   dockerfile: Dockerfile
      #   ports:
      #       - 9090:9090
      #   volumes:
      #     - ./prometheus/prom.yml:/etc/prometheus/prometheus.yml
      # ----------------------------------------------
